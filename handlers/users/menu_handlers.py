import logging
from typing import Union

from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text

from data.config import admins
from keyboards.inline.govno_kb import categories_keyboard, subcategory_keyboard, items_keyboard, item_keyboard, \
    buy_item, menu_cd
from keyboards.keyvoard import mainMenu, kb_start_size, sizeMain
from loader import dp, bot
from states.sizeUser import start_testing, cancel_handler1, set_V, FSMClient, set_Vg, set_Vpg, set_Vb, set_Vt, \
    set_sizeL, set_email, yes_not

from utils.db_api.database import Item

from utils.db_api.db_commands import get_item, show_size_user, check_z, get_photo, get_name_item, get_price_item, \
    get_decr_item, check_user, new_user


@dp.callback_query_handler(menu_cd.filter())
async def navigate(call: types.CallbackQuery, callback_data: dict):
    currrent_level = callback_data.get('level')
    category = callback_data.get('category')
    subcategory = callback_data.get('subcategory')
    item_id = int(callback_data.get('item_id'))

    levels = {
        "0": list_categories,
        "1": list_subcategories,
        "2": list_items,
        "3": show_item
    }
    currrent_level_function = levels[currrent_level]

    await currrent_level_function(call,
                                  category=category,
                                  subcategory=subcategory,
                                  item_id=item_id
                                  )


@dp.callback_query_handler(buy_item.filter())
async def send_admin(call: Union[types.Message, types.CallbackQuery], callback_data: dict):
    id_user_order = call.from_user.id
    check = await check_z(id_user_order)
    if check:
        name_user_order = call.from_user.username
        id_item_order = int(callback_data['item_id'])
        name_item = await Item.select('name').where(Item.id == id_item_order).gino.scalar()
        siz = await show_size_user(id_user_order)

        for admin in admins:
            try:
                await call.bot.send_message(admin,
                                            f'–ù–æ–≤—ã–π –∑–∞–∫–∞–∑! \n'
                                            f'–¢–æ–≤–∞—Ä ‚Ññ{id_item_order} - {name_item} \n'
                                            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Id {id_user_order} \n'
                                            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{name_user_order}\n'
                                            f'{siz}')
            except Exception as err:
                logging.exception(err)



        await call.answer('–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É', show_alert=True)
    else:
        await call.answer('–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –≤–≤–µ–¥–∏—Ç–µ –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é', show_alert=True)


async def start(message: types.Message):
    await bot.send_message(message.from_user.id, "–ú—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=mainMenu)
    id_user=message.from_user.id
    firstname_user=message.from_user.first_name
    lastname_user = message.from_user.last_name

    check=await check_user(id_user)
    if check:
        pass
    else:
        for admin in admins:
            try:

                await bot.send_message(admin, '–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! \n'
                                                  f'ID {id_user}\n'
                                                  f'{firstname_user}')
                await new_user(user_id=id_user,user_first_name=firstname_user,user_last_name=lastname_user)
            except Exception as err:
                logging.exception(err)


async def show_menu1(message: types.Message):
    await list_categories(message)


async def list_categories(message: Union[types.Message, types.CallbackQuery], **kwargs):
    markup = await categories_keyboard()
    if isinstance(message, types.Message):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=markup)

    elif isinstance(message, types.CallbackQuery):
        call = message
        await call.message.edit_reply_markup(markup)
        await bot.answer_callback_query(message.id)


async def list_subcategories(callback: types.CallbackQuery, category, **kwargs):
    markup = await subcategory_keyboard(category)
    await bot.answer_callback_query(callback.id)
    await callback.message.edit_reply_markup(markup)


async def list_items(callback: types.CallbackQuery, category, subcategory, **kwargs):
    markup = await items_keyboard(category=category, subcategory=subcategory)
    await bot.answer_callback_query(callback.id)
    await callback.message.answer("–°–º–æ—Ç—Ä–∏ —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å", reply_markup=markup)


async def show_item(callback: types.CallbackQuery, category, subcategory, item_id):
    markup = await item_keyboard(category, subcategory, item_id)
    item = await get_item(item_id)
    text = f'{item}'
    photo_id = await get_photo(item_id)
    name = await get_name_item(item_id)
    price = await get_price_item(item_id)
    decr = await get_decr_item(item_id)
    await bot.answer_callback_query(callback.id)

    await callback.message.answer_photo(
        photo=f'{photo_id}',
        caption=f"–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {name}\n"
                f"________________________________________\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ:"
                f" {decr}\n"
                f"________________________________________\n"
                f"–¶–µ–Ω–∞: {price} –†—É–±",
        reply_markup=markup)

    #await callback.message.edit_text(text, reply_markup=markup)


# –õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç –∏ –ø—à–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
async def load_photo(message: types.Message):
    id_ph = message.photo[0].file_id
    await bot.send_message(message.from_user.id, id_ph)


async def bot_message(message: types.Message):
    if message.text == '–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        user_id = message.from_user.id
        siz = await show_size_user(user_id)
        check = await check_z(user_id)
        if check:
            await bot.send_message(message.from_user.id, f'–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ {siz}', reply_markup=sizeMain)
        else:
            await bot.send_message(message.from_user.id, '–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é',
                                   reply_markup=kb_start_size)

    elif message.text == '–î–æ—Å—Ç–∞–≤–∫–∞':
        await bot.send_message(message.from_user.id, '–ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –ø–æ-–≤—Å–µ–º—É –ú–∏—Ä—Éüôåüèª\n'
                                                     '–ü–æ –†–æ—Å—Å–∏–∏:\n'
                                                     '–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ 300‚ÇΩ\n '
                                                     '–°–¥—ç–∫ 300‚ÇΩ\n'
                                                     '\n '
                                                     '–í –ë–µ–ª–∞—Ä—É—Å—å:–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ 500‚ÇΩ\n'
                                                     '(14 –¥–Ω–µ–π –¥–æ—Å—Ç–∞–≤–∫–∞)\n '
                                                     '–°–¥—ç–∫ 500‚ÇΩ\n '
                                                     '(4 –¥–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∞)\n'
                                                     '\n'
                                                     '–í –¥—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ\n '
                                                     '\n'
                                                     '–û—Ç 4000‚ÇΩ –ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –¥–æ—Å—Ç–∞–≤–∫–∞', reply_markup=mainMenu)
    elif message.text == '–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑':
        await bot.send_message(message.from_user.id, '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤—ã –º–æ–∂–µ—Ç–µ –≤ –±–æ—Ç–µ –∏–ª–∏ –≤ –ª—é–±–æ–π —Å–æ—Ü—Å–µ—Ç–∏\n'
                                                     '\n'
                                                     '–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –±–æ—Ç–µ:\n'
                                                     '1. –í–Ω–µ—Å—Ç–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ –º–µ—Ä–æ–∫;\n '
                                                     '2. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–æ—Ñ–æ—Ä–º–∏—Ç—å¬ª –ø–æ–¥ –∏–∑–¥–µ–ª–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å;\n '
                                                     '3. –í —Ç–µ—á–µ–Ω–∏–µ 5—Ç–∏ –º–∏–Ω—É—Ç —Å –≤–∞–º —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ –æ–ø–ª–∞—Ç—ã;\n'
                                                     '\n'
                                                     '–ò–ª–∏ –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å, –Ω–∞–ø–∏—Å–∞–≤:\n'
                                                     '–í ¬´—Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞¬ª –≤ vk\n '
                                                     'https://vk.com/liioviio\n '
                                                     '\n '
                                                     '–í Direct –≤ Instagram \n '
                                                     'https://instagram.com/liioviio?utm_medium=copy_link', reply_markup=mainMenu)
    elif message.text == '–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è':
        await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç, –∫–æ–º–∞–Ω–¥–∞ LIIOVIIO –Ω–∞ —Å–≤—è–∑–∏! \n'
                                                     '\n'
                                                     '–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –ú—ã - —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –±—Ä–µ–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–µ 2—Ö –ª–µ—Ç –¥–∞—Ä–∏—Ç –¥–µ–≤—É—à–∫–∞–º –∫–æ–º—Ñ–æ—Ä—Ç –∏ –∫—Ä–∞—Å–æ—Ç—Éüôåüèª\n '
                                                     '\n'
                                                     '–ú—ã —Å–æ–∑–¥–∞—ë–º –∫—Ä–∞—Å–∏–≤–æ–µ –Ω–∏–∂–Ω–µ–µ –±–µ–ª—å–µ –≤ –∫–æ—Ç–æ—Ä–æ–º —É–¥–æ–±–Ω–æ –≤–µ—Å—å –¥–µ–Ω—å! –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –º—è–≥–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞. –û—Ç—à–∏–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ –≤–∞—Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –ø–æ –í–∞—à–∏–º –º–µ—Ä–∫–∞–ºü§ç', reply_markup=mainMenu)


def register_handlers_menu(dp: Dispatcher):

    dp.register_message_handler(show_menu1, text="–ö–∞—Ç–∞–ª–æ–≥")
    dp.register_message_handler(start, text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    dp.register_message_handler(start, commands=['start'], state=None)
    dp.register_message_handler(start_testing, text='–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ', state='*')
    dp.register_message_handler(start_testing, text='–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤', state='*')
    dp.register_message_handler(cancel_handler1, state="*", commands="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    dp.register_message_handler(cancel_handler1, Text(equals='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', ignore_case=True), state="*")
    dp.register_message_handler(set_V, state=FSMClient.V)
    dp.register_message_handler(set_Vg, state=FSMClient.Vg)
    dp.register_message_handler(set_Vpg, state=FSMClient.Vpg)
    dp.register_message_handler(set_Vt, state=FSMClient.Vt)
    dp.register_message_handler(set_Vb, state=FSMClient.Vb)
    dp.register_message_handler(set_sizeL, state=FSMClient.sizeL)
    dp.register_message_handler(set_email, state=FSMClient.email)
    dp.register_message_handler(yes_not, state=FSMClient.check_size)
    dp.register_message_handler(bot_message, state='*')
 #   dp.register_message_handler(load_photo, content_types=["photo"])
