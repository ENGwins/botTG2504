import json

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from filters import IsPrivate
from handlers.admin.adminPanel import adminOrder, admin_cb, state_order, change_catalog_kb
from keyboards.inline.govno_kb import bonus_kb
from keyboards.keyvoard import mainMenu
from loader import dp, bot
from states.Mailing import MailingService

# =================================–†–∞—Å—Å—ã–ª–∫–∞=================================


# —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
from states.admin import admin_trak, admin_bonus, change_catalog
from utils.db_api.db_commands import search_order, update_tracking, search_order_id, update_state, update_fin_state, \
    update_my_balans, check_user, my_balans, \
    search_com_qua_order, get_item, change_catalog_, get_price_item, update_sale, check_sale

@dp.message_handler(Text('–û—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
async def cancel_handler1(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await bot.send_message(message.from_user.id, "–ú—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é", reply_markup=mainMenu)


@dp.message_handler(IsPrivate(), state=MailingService.text)
async def mailing_text(message: types.Message, state: FSMContext):
    # await bot.send_message(message.from_user.id, '–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!')
    answer = message.text
    markup = InlineKeyboardMarkup(row_width=2,
                                  inline_keyboard=[
                                      [
                                          InlineKeyboardButton(text='üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é',
                                                               callback_data='add_photo'),
                                          InlineKeyboardButton(text='üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='next'),
                                          InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='quit')
                                      ]
                                  ])
    await state.update_data(text=answer)
    await message.answer(text=answer, reply_markup=markup)
    await MailingService.state.set()


@dp.message_handler(IsPrivate(), state=MailingService.photo, content_types=types.ContentTypes.PHOTO)
async def mailing_photo(message: types.Message, state: FSMContext):
    photo_file_id = message.photo[-1].file_id  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–π–ª id
    await state.update_data(photo=photo_file_id)
    data = await state.get_data()
    text = data.get('text')
    photo = data.get('photo')
    markup = InlineKeyboardMarkup(row_width=2,
                                  inline_keyboard=[
                                      [
                                          InlineKeyboardButton(text='üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='next'),
                                          InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='quit')

                                      ]
                                  ])
    await message.answer_photo(photo=photo, caption=text, reply_markup=markup)


@dp.message_handler(IsPrivate(), state=MailingService.photo)
async def no_photo(message: types.Message):
    markup = InlineKeyboardMarkup(row_width=2,
                                  inline_keyboard=[
                                      [
                                          InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='quit')
                                      ]
                                  ])
    await message.answer('–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é', reply_markup=markup)


# =================================–ó–∞–∫–∞–∑—ã=================================


@dp.callback_query_handler(text="orders")
async def show_orders(callback: types.CallbackQuery):
    await callback.message.delete()
    id_orders = await search_order_id()
    for id_order in id_orders:
        id_or = id_order[0]
        markup = await adminOrder(id_or)
        item, name, number, state, tracking, com, qua = await search_com_qua_order(id_or)
        await bot.send_message(callback.from_user.id, text=f'–ó–∞–∫–∞–∑ ‚Ññ {id_or}\n\n'
                                                           f'<u>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</u> -  <b>{item} - {qua} —à—Ç</b> \n\n'
                                                           f'<u>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</u> {com}\n\n'
                                                           f'<u>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞</u> - {state}\n'
                                                           f'<u>–¢—Ä–µ–∫ –Ω–æ–º–µ—Ä</u> - <code>{tracking}</code> \n\n'
                                                           f'–ò–º—è {name}\n'
                                                           f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {number}\n', parse_mode='html',
                               reply_markup=markup)


@dp.callback_query_handler(admin_cb.filter(admin_change="admin_change"))
async def add_tracking(callback: CallbackQuery, callback_data: dict):
    id_order = int(callback_data['id_order'])
    markup = await state_order(id_order)
    item, name, number, state, tracking, com, qua = await search_com_qua_order(id_order)
    await callback.message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ {id_order}\n\n'
                                       f'–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å {state}', reply_markup=markup)


@dp.callback_query_handler(admin_cb.filter(state='state1'))
async def state1(callback: CallbackQuery, callback_data: dict):
    id_order = callback_data['id_order']
    id = int(id_order)
    state_order = '–í–∞—à –∑–∞–∫–∞–∑ –Ω–∞ –ø–æ—à–∏–≤–µ, —Å—Ä–æ–∫ –ø–æ—à–∏–≤–∞ 14 –¥–Ω–µ–π. –ó–∞–∫–∞–∑ –º–æ–∂–µ—Ç –±—ã—Ç—å –≥–æ—Ç–æ–≤ —Ä–∞–Ω—å—à–µ, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å—é –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ'
    await update_state(id, state_order)
    await callback.answer('–û–±–Ω–æ–≤–ª–µ–Ω–æ')
    await callback.message.delete()


@dp.callback_query_handler(admin_cb.filter(state='state2'))
async def state1(callback: CallbackQuery, callback_data: dict):
    id_order = callback_data['id_order']
    id = int(id_order)
    state_order = '–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤, –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏'
    await update_state(id, state_order)
    await callback.answer('–û–±–Ω–æ–≤–ª–µ–Ω–æ')
    await callback.message.delete()


@dp.callback_query_handler(admin_cb.filter(state='state3'))
async def state3(callback: CallbackQuery, callback_data: dict):
    id_order = int(callback_data['id_order'])
    item, name, number, state, tracking, com, qua = await search_com_qua_order(id_order)
    state_order = f'–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –¢—Ä–µ–∫ –Ω–æ–º–µ—Ä {tracking}'
    await update_state(id_order, state_order)
    await callback.answer('–û–±–Ω–æ–≤–ª–µ–Ω–æ')
    await callback.message.delete()


@dp.callback_query_handler(admin_cb.filter(state='state4'))
async def state1(callback: CallbackQuery, callback_data: dict):
    id_order = callback_data['id_order']
    id = int(id_order)
    finish_state = True
    await update_fin_state(id, finish_state)
    await callback.answer('–ó–∞–∫–∞–∑ –∑–∞–∫—Ä—ã—Ç')
    await callback.message.delete()


@dp.callback_query_handler(admin_cb.filter(tracking='tracking'))
async def add_tracking(callback: CallbackQuery, callback_data: dict, state: FSMContext):
    id_order = callback_data['id_order']
    id = int(id_order)
    await callback.message.delete()
    # markup=await state_order(id)
    await callback.bot.send_message(chat_id=callback.from_user.id, text=f'–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ {id}')
    # await callback.bot.send_message(chat_id=callback.from_user.id,text='–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∑–∞ ',reply_markup=markup)
    async with state.proxy() as data:
        data['order_id'] = id
    await admin_trak.one.set()


@dp.message_handler(state=admin_trak.one)
async def add_track(message: types.Message, state: FSMContext):
    id_user = message.from_user.id
    tracking = message.text
    async with state.proxy() as data:
        id_order = data['order_id']
    await update_tracking(id_order, tracking)
    order = await search_order(id_order)
    await bot.send_message(chat_id=id_user, text=f"–î–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ {order} –æ–±–Ω–æ–≤–ª–µ–Ω —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä {tracking}")
    await state.finish()


@dp.callback_query_handler(admin_cb.filter(admin_change='chage_catalog'))
async def chage_catalog(callback: types.CallbackQuery):
    await callback.bot.send_message(callback.from_user.id, '–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞')
    await change_catalog.id_item.set()
    await callback.answer()


@dp.message_handler(state=change_catalog.id_item)
async def select_state(message: types.Message, state: FSMContext):
    id = message.text
    await message.delete()
    async with state.proxy() as data:
        data['id_item'] = id
    try:
        idd = int(id)
        if await get_item(idd):
            markup = await change_catalog_kb(idd)
            name = await get_item(idd)
            await bot.send_message(message.from_user.id, f'–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ç–æ–≤–∞—Ä–∞ - {name}', reply_markup=markup)
            await change_catalog.active.set()

        else:
            # print('–¢–æ–≤–∞—Ä —Å —ç—Ç–∏–º id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π id')
            await bot.send_message(message.from_user.id,
                                   f'–¢–æ–≤–∞—Ä —Å —ç—Ç–∏–º id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π id')

    except:
        await bot.send_message(message.from_user.id, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã! ')



@dp.callback_query_handler(admin_cb.filter(admin_change='deactivate'), state=change_catalog.active)
async def deactivate(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    async with state.proxy() as data:
        id = int(data['id_item'])
    states = 'deactivate'
    await change_catalog_(id, states)
    await callback.bot.send_message(callback.from_user.id, f'–û–±–Ω–æ–≤–∏–ª–∏ —Å—Ç–∞—É—Å "–ù–ï–¢ –≤ –Ω–∞–ª—á–∏–∏" - {id}')
    await callback.answer()
    await state.finish()


@dp.callback_query_handler(admin_cb.filter(admin_change='active'), state=change_catalog.active)
async def active(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.delete()
    async with state.proxy() as data:
        id = int(data['id_item'])
    states = 'active'
    await change_catalog_(id, states)
    await callback.bot.send_message(callback.from_user.id, f'–û–±–Ω–æ–≤–∏–ª–∏ —Å—Ç–∞—É—Å "–í –Ω–∞–ª–∏—á–∏–∏" - {id}')
    await callback.answer()
    await state.finish()


@dp.callback_query_handler(admin_cb.filter(admin_change='sale'))
async def search_id(callback: types.CallbackQuery):
    await callback.bot.send_message(callback.from_user.id, '–í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞')
    await change_catalog.sale1.set()
    await callback.answer()


@dp.message_handler(state=change_catalog.sale1)
async def check_item(message: types.Message, state: FSMContext):
    try:
        id = int(message.text)
        await message.delete()
        async with state.proxy() as data:
            data['id_item'] = id
        idd = int(id)
        if await get_item(idd):
            # markup = await change_catalog_kb(idd)
            name = await get_item(idd)
            price = int(await get_price_item(idd))
            sale=int(await check_sale(idd))
            await bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ \n\n<i>{name}</i>\n\n'
                                                         f'–ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ {price}'
                                                         f'\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price-sale} –†—É–±\n '
                                                         f'–ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–∫–∏–¥–∫—É –≤–≤–µ–¥–∏—Ç–µ 0')
            await change_catalog.sale2.set()
        else:
            # print('–¢–æ–≤–∞—Ä —Å —ç—Ç–∏–º id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π id')
            await bot.send_message(message.from_user.id,
                                   f'–¢–æ–≤–∞—Ä —Å —ç—Ç–∏–º id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π id')
    except:
        await bot.send_message(message.from_user.id, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã! ')


@dp.message_handler(state=change_catalog.sale2)
async def set_sale(message: types.Message, state: FSMContext):
    try:
        sale = int(message.text)
        async with state.proxy() as data:
            id_item = int(data['id_item'])
        old_price = int(await get_price_item(id_item))
        if old_price < sale < 0:
            await bot.send_message(message.from_user.id, '–°—É–º–º–∞ —Å–∫–∏–¥–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞,'
                                                         '\n–≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏')
        else:
            await update_sale(id_item, sale)
            await bot.send_message(message.from_user.id, '–°–∫–∏–¥–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
            await state.finish()
    except:
        await bot.send_message(message.from_user.id, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã! ')


@dp.callback_query_handler(text='bonus')
async def add_bonus(callback: CallbackQuery):
    await admin_bonus.one.set()
    await callback.bot.send_message(callback.from_user.id, '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ')


@dp.message_handler(state=admin_bonus.one)
async def add_bonus(message: types.Message, state: FSMContext):
    await admin_bonus.two.set()
    await message.bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ —Ä—É–±–ª–∏ ')
    id_user = message.text
    async with state.proxy() as data:
        data['id_user'] = id_user


@dp.message_handler(state=admin_bonus.two)
async def add_bonus(message: types.Message, state: FSMContext):
    markup = await bonus_kb()
    await admin_bonus.three.set()
    balans = message.text
    async with state.proxy() as data:
        data['balans'] = balans

    async with state.proxy() as data:
        id_user = data['id_user']

    await message.bot.send_message(message.from_user.id,
                                   f'–ù–∞—á–∏—Å–ª—è–µ–º ( {balans} ) –±–æ–Ω—É—Å–æ–≤ \n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {id_user} ?',
                                   reply_markup=markup)


@dp.callback_query_handler(text='bonus_no', state=admin_bonus.three)
async def add_bonus(callback: CallbackQuery, state: FSMContext):
    id_user = callback.from_user.id
    await callback.bot.send_message(id_user, '–û—Ç–º–µ–Ω–∏–ª–∏')
    await state.finish()


@dp.callback_query_handler(text='bonus_yes', state=admin_bonus.three)
async def add_bonus(callback: CallbackQuery, state: FSMContext):
    try:
        async with state.proxy() as data:
            balans = int(data['balans'])
            id_user = int(data['id_user'])

        check = await check_user(id_user)
        if check:
            balans_old = int(await my_balans(id_user))
            balans = balans_old + balans
            if balans < 0:
                balans = 0
            await update_my_balans(id_user, balans)
            await callback.bot.send_message(callback.from_user.id, f'–û–±–Ω–æ–≤–∏–ª–∏!')
            # await callback.bot.send_message(id_user,'–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–æ–Ω—É—Å–Ω—ã–µ —Ä—É–±–ª–∏!')
        else:
            await callback.bot.send_message(callback.from_user.id,
                                            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID.\n'
                                            f'–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º')
    except ValueError:
        await callback.bot.send_message(callback.from_user.id, '–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
    await state.finish()
